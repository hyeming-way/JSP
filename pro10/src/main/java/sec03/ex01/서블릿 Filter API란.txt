


1.서블릿 Filter API란?
 - 서블릿 필터(Filter)는 클라이언트의 요청(Request)과 서버의 응답(Response)을 가로채서 
   추가적인 작업(전처리/후처리)을 수행할 수 있는 기능입니다.
   
 - 요청(Request)이 서블릿(Servlet)이나 JSP로 전달되기 전에 실행되며, 
   응답(Response)이 클라이언트로 전달되기 전에 실행될 수도 있습니다.
   
2. Filter가 필요한 이유

  2.1. 공통적인 작업을 한 곳에서 처리할 수 있음
      - 예: 인증/인가(로그인 확인), 로깅(기록), 압축, 인코딩 설정

  2.2. 각 서블릿마다 중복된 코드 작성을 줄일 수 있음
	  - 예: 매 요청마다 UTF-8 인코딩을 설정해야 하는 경우, 필터에서 한 번만 처리하면 됨.

  2.3. 보안 및 성능 최적화 가능
	  - 예: 요청을 분석하여 악성 요청 차단(XSS, SQL Injection 방지)
	  - 응답을 압축하여 네트워크 트래픽 최적화(Gzip 압축)
	

3.주요 메서드
		메서드																							설명
	init(FilterConfig filterConfig)													필터가 처음 초기화될 때 실행됨 (필터 설정 가능)
	doFilter(ServletRequest request, ServletResponse response, FilterChain chain)	요청을 가로채서 필요한 작업 수행 후, chain.doFilter() 호출하여 다음 필터나 서블릿으로 전달
	destroy()																		필터가 제거될 때 실행됨

	  
4. Filter의 동작 방식
  (요청과 응답을 가로채는 역할)

	클라이언트 요청 → [Filter] → [Servlet] → 응답 → [Filter] → 클라이언트 전달

	

	동작1. 클라이언트가 요청(Request)을 보냄.

	동작2. 요청이 서블릿(Servlet)이나 JSP로 전달되기 전에 Filter가 먼저 실행됨.

	동작3. Filter는 요청을 변형하거나 검증할 수 있음.

	동작4. Filter가 chain.doFilter()를 호출하면 다음 필터 또는 서블릿으로 요청이 전달됨.

	동작5. 서블릿이 처리한 후, 응답(Response)이 필터로 다시 전달될 수 있음.

	동작6. 필터가 응답을 변형할 수도 있음.

	동작7. 최종 응답이 클라이언트에게 전송됨.
